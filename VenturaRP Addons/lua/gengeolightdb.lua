-- This file has been automatically generated by "Generate gengeolightdb.lua.php". The used database source is IP2LOCATION-LITE-DB1.CSV.
local obsolete
if !file.Exists("geolocation/internal-includeddb1.txt", "DATA") then
	obsolete = true
else
	local db_date = 1530446400
	local includeddb1 = file.Open("geolocation/internal-includeddb1.txt", "r", "DATA")
	includeddb1:Seek(1)
	local filecursor = includeddb1:Tell()
	local filesize = includeddb1:Size()
	local function ReadChar ()
		local Char
		if filecursor < filesize then
			Char = includeddb1:Read(1)
			filecursor = filecursor+1
		end
		return Char
	end
	local readchar = ReadChar()
	local result = ""
	while readchar and readchar != "\n" do
		result = result..readchar
		readchar = ReadChar()
	end
	includeddb1:Close()
	if tonumber(result) != db_date then
		obsolete = true
	else
		obsolete = false
	end
end
if obsolete then
	MsgN("Building updated internal IP location database...")
	local cn = {
["-"]="-",
AU="Australia",
CN="China",
JP="Japan",
TH="Thailand",
IN="India",
MY="Malaysia",
KR="Korea",
US="United States",
SG="Singapore",
HK="Hong Kong",
TW="Taiwan",
PH="Philippines",
VN="Viet Nam",
NO="Norway",
FR="France",
NL="Netherlands",
GB="United Kingdom",
DE="Germany",
ES="Spain",
IT="Italy",
PL="Poland",
CZ="Czech Republic",
DK="Denmark",
PT="Portugal",
SE="Sweden",
CD="Congo",
IE="Ireland",
TR="Turkey",
FI="Finland",
RU="Russian Federation",
AE="United Arab Emirates",
GR="Greece",
BR="Brazil",
AT="Austria",
LU="Luxembourg",
CA="Canada",
UG="Uganda",
AM="Armenia",
MU="Mauritius",
AR="Argentina",
UY="Uruguay",
BE="Belgium",
BG="Bulgaria",
IL="Israel",
UA="Ukraine",
ZA="South Africa",
QA="Qatar",
KZ="Kazakhstan",
SA="Saudi Arabia",
LV="Latvia",
IR="Iran",
MX="Mexico",
SY="Syrian Arab Republic",
KW="Kuwait",
BH="Bahrain",
LB="Lebanon",
OM="Oman",
JO="Jordan",
CH="Switzerland",
IQ="Iraq",
RO="Romania",
CY="Cyprus",
GE="Georgia",
AZ="Azerbaijan",
ZM="Zambia",
ZW="Zimbabwe",
PS="Palestine",
LT="Lithuania",
SK="Slovakia",
RS="Serbia",
IS="Iceland",
HU="Hungary",
SI="Slovenia",
MD="Moldova",
MK="Macedonia",
AO="Angola",
LI="Liechtenstein",
JE="Jersey",
SC="Seychelles",
HR="Croatia",
BA="Bosnia and Herzegovina",
EE="Estonia",
KG="Kyrgyzstan",
TJ="Tajikistan",
IM="Isle of Man",
GG="Guernsey",
MT="Malta",
GI="Gibraltar",
LY="Libya",
VG="Virgin Islands",
YE="Yemen",
BY="Belarus",
RE="Reunion",
GP="Guadeloupe",
MQ="Martinique",
GU="Guam",
DO="Dominican Republic",
VI="Virgin Islands",
PR="Puerto Rico",
NZ="New Zealand",
BD="Bangladesh",
PK="Pakistan",
ID="Indonesia",
PG="Papua New Guinea",
CL="Chile",
TT="Trinidad and Tobago",
CR="Costa Rica",
CO="Colombia",
MO="Macao",
EC="Ecuador",
LK="Sri Lanka",
VE="Venezuela",
LC="Saint Lucia",
KY="Cayman Islands",
GD="Grenada",
PE="Peru",
CW="Curacao",
BB="Barbados",
BS="Bahamas",
DM="Dominica",
NP="Nepal",
TM="Turkmenistan",
KH="Cambodia",
TK="Tokelau",
MV="Maldives",
AF="Afghanistan",
NC="New Caledonia",
FJ="Fiji",
MN="Mongolia",
WF="Wallis and Futuna",
AL="Albania",
UZ="Uzbekistan",
BL="Saint Barthelemy",
ME="Montenegro",
SM="San Marino",
MM="Myanmar",
FO="Faroe Islands",
MF="Saint Martin (French Part)",
EG="Egypt",
LR="Liberia",
KE="Kenya",
GH="Ghana",
NG="Nigeria",
TZ="Tanzania",
BW="Botswana",
MZ="Mozambique",
MG="Madagascar",
NA="Namibia",
CI="Cote D'ivoire",
SD="Sudan",
CM="Cameroon",
MW="Malawi",
GA="Gabon",
ML="Mali",
BJ="Benin",
TD="Chad",
CV="Cabo Verde",
RW="Rwanda",
CG="Congo",
GM="Gambia",
LS="Lesotho",
MA="Morocco",
DZ="Algeria",
GN="Guinea",
SZ="Swaziland",
BF="Burkina Faso",
SO="Somalia",
SL="Sierra Leone",
NE="Niger",
CF="Central African Republic",
TG="Togo",
SS="South Sudan",
BI="Burundi",
GQ="Equatorial Guinea",
SN="Senegal",
AS="American Samoa",
MR="Mauritania",
DJ="Djibouti",
KM="Comoros",
IO="British Indian Ocean Territory",
TN="Tunisia",
YT="Mayotte",
LA="Lao People's Democratic Republic",
BN="Brunei Darussalam",
BT="Bhutan",
NR="Nauru",
VU="Vanuatu",
WS="Samoa",
FM="Micronesia",
PF="French Polynesia",
TL="Timor-Leste",
TO="Tonga",
HN="Honduras",
BO="Bolivia",
SV="El Salvador",
GT="Guatemala",
NI="Nicaragua",
PA="Panama",
BZ="Belize",
MP="Northern Mariana Islands",
PY="Paraguay",
GL="Greenland",
AD="Andorra",
NU="Niue",
KI="Kiribati",
MH="Marshall Islands",
PW="Palau",
SB="Solomon Islands",
TV="Tuvalu",
GF="French Guiana",
GY="Guyana",
SR="Suriname",
VA="Holy See",
MC="Monaco",
ER="Eritrea",
ET="Ethiopia",
GW="Guinea-Bissau",
ST="Sao Tome and Principe",
AG="Antigua and Barbuda",
CU="Cuba",
HT="Haiti",
JM="Jamaica",
KN="Saint Kitts and Nevis",
VC="Saint Vincent and The Grenadines",
FK="Falkland Islands (Malvinas)",
BM="Bermuda",
AI="Anguilla",
UM="United States Minor Outlying Islands",
TC="Turks and Caicos Islands",
AW="Aruba",
PM="Saint Pierre and Miquelon",
SX="Sint Maarten (Dutch Part)",
AX="Aland Islands",
BV="Bouvet Island",
NF="Norfolk Island",
AQ="Antarctica",
BQ="Bonaire",
KP="Korea",
MS="Montserrat",
CK="Cook Islands",
CX="Christmas Island",
CC="Cocos (Keeling) Islands",
	}
	local includeddb1 = file.Open("geolocation/internal-includeddb1.txt", "w", "DATA")
	local contentfile = file.Open("gengeolightdb2.lua", "r", "LUA")
	contentfile:Seek(3)
	local function WriteIpRow (data)
		includeddb1:Write('"'..data[1]..'","'..data[2]..'","'..data[3]..'","'..cn[data[3]]..'"'.."\n")
	end
	includeddb1:Write("#1530446400".."\n")
	local filecursor = contentfile:Tell()
	local filesize = contentfile:Size()
	local function ReadChar ()
		local Char
		if filecursor < filesize then
			Char = contentfile:Read(1)
			filecursor = filecursor+1
		end
		return Char
	end
	local readchar = ReadChar()
	local result = ""
	while readchar do
		if readchar != "\t" then
			result = result..readchar
		else
			WriteIpRow(string.Explode(",", result, false))
			result = ""
		end
		readchar = ReadChar()
	end
	if #result >= 3 then
		WriteIpRow(string.Explode(",", result, false))
	end
	includeddb1:Close()
	MsgN("Finished building updated internal IP location database.")
end
